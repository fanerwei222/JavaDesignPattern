



工厂模式:



简单工厂模式 :
	
	(1)涉及到的对象或实体及作用
		1)一个具有抽象方法method()的接口  Inter;
		2)若干个实现接口	Inter的类A/B/C...
		3)一个创建和提供类A/B/C...实例的工厂类
		4)一个调用工厂类的客户端
    
    
    
    
 工厂方法模式 ：
	在简单工厂模式的基础上进行了改造;
	
	增加了一个工厂接口
	
	每一个运算都对应一个工厂实例
  
  
  
  
  抽象工厂模式的优缺点
  优点：

  抽象工厂模式最大的好处是易于交换产品系列，由于具体工厂类，例如 IFactory factory=new OracleFactory(); 
  在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，
  它只需要改变具体工厂即可使用不同的产品配置。

  抽象工厂模式的另一个好处就是它让具体的创建实例过程与客户端分离，
  客户端是通过它们的抽象接口操作实例，产品实现类的具体类名也被具体的工厂实现类分离，
  不会出现在客户端代码中。就像我们上面的例子，客户端只认识IUser和ILogin，
  至于它是MySQl里的表还是Oracle里的表就不知道了。

  缺点：

  抽象工厂模式虽然可以很方便的帮我们切换两个不同的数据库访问的代码。
  但是如果我们的需求来自于增加功能，例如我们还需要加多一个会员数据表 MemberData，
  那么我们就得先在以上代码的基础上，增加三个类：IMemberData，MysqlMemberData，OracleMemberData，
  还需要修改IFactory、MysqlFactory以及OracleFactory才可以完全实现。增加类还好说，
  毕竟我们是对扩展开放的，但是却要修改三个类，就有点糟糕了。

  而且还有一个问题就是客户端程序类在实际的开发中，肯定不止一个，
  很多地方都会需要使用 IUser 或 ILogin ，而这样的设计，
  其实在每一个类的开始都需要写上 IFactory factory=new OracleFactory(); 
  这样的代码，如果我有一百个访问 User 或 Login 表的类，那不就得改一百个类？
  很多人都喜欢说编程是门艺术，但也的确如此，对于艺术我们应该去追求美感，
  所以这样大批量的代码更改，显然是非常丑陋的做法
		
